{Application 'SURVEY' logic file generated by CSPro}
PROC GLOBAL

function string Get_Pronouns()

	if SEX = 1 then
		exit "He/Him";
	else
		exit "She/Her";
	endif;
	
end;

PROC SURVEY_FF

PROC HIGHEST_GRADE_COMPLETED

// primary school : grades 1 - 9 : expected age 7 - 15
// secondary school : grades 10 - 12 : expected age 16 - 17
// university school : professional : expected age 18+

// soft check - 1 year band around expected age for a level school
// hard check - anything outside of 1 year

// when HIGHEST_GRADE_COMPLETED :: AGE;
	                         // :: 0:5   -> errmsg("Hard: Nope, too young!") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);
	 // 1                       :: 6     -> errmsg("Soft: Are you sure?") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED, "Continue", continue);
	 // 1                       :: 16    -> errmsg("Soft: Are you sure?") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED, "Continue", continue);
	 // 1                       :: > 16  -> errmsg("Hard: Nope, too old") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);
	 // 2                       :: 6:15  -> errmsg("Hard: Nope, too young!") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);
     // 2                       :: 15    -> errmsg("Soft: Are you sure?") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED, "Continue", continue);
     // 2                       :: 18    -> errmsg("Soft: Are you sure?") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED, "Continue", continue);
	 // 2                       :: > 18  -> errmsg("Hard: Nope, too old") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);	 
	 // 3                       :: 6:16  -> errmsg("Hard: Nope, too young!") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);
	 // 3                       :: 17    -> errmsg("Soft: Are you sure?") select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED, "Continue", continue);	 
// endwhen;

numeric msg_code = 0;

when HIGHEST_GRADE_COMPLETED :: AGE;
	                         :: 0:5   -> msg_code = 1;
	 1                       :: 6     -> msg_code = 2;
	 1                       :: 16    -> msg_code = 2;
	 1                       :: > 16  -> msg_code = 3;
	 2                       :: 6:15  -> msg_code = 1;
     2                       :: 15    -> msg_code = 2;
     2                       :: 18    -> msg_code = 2;
	 2                       :: > 18  -> msg_code = 3;
	 3                       :: 6:16  -> msg_code = 1;
	 3                       :: 17    -> msg_code = 2;
endwhen;

if msg_code = 1 then
	errmsg("Hard: Nope, too young!")
		select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);
elseif msg_code = 2 then
	warning("Soft: Are you sure?")
		select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED, "Continue", continue);
elseif msg_code = 3 then
	errmsg("Hard: Nope, too old")
		select("Age", AGE, "Highest Grade", HIGHEST_GRADE_COMPLETED);
endif;

PROC FORMATTERS

postproc

numeric pi = 3.14;
string state = "Texas";

if $ = 1 then
	errmsg("AGE = %d, pi = %f, AGE = %v, pi = %v", AGE, Pi, AGE, Pi);
elseif $ = 2 then
	errmsg("AGE = %d, AGE = %03d,  AGE = %v", AGE, AGE, AGE);
elseif $ = 3 then
	errmsg("string = %s, char = %c", state, state);
elseif $ = 4 then
	errmsg("value = %v, label = %l", SEX, SEX);
elseif $ = 5 then
	errmsg("procedure = %p");
elseif $ = 6 then
	skip to CAPI_QUESTION_TEXT;
endif;	

PROC DYNAMIC_VALUE_SET

preproc

valueset string vs;

forcase GEOCODES_DICT do
	vs.add(strip(G_NAME), key(GEOCODES_DICT))
enddo;

// forcase GEOCODES_DICT where G_REGION = 2 and G_WARD = 01 do
	// vs.add(strip(G_NAME), key(GEOCODES_DICT))
// enddo;

// forcase GEOCODES_DICT(startswith, "201") do
	// vs.add(strip(G_NAME), key(GEOCODES_DICT))
// enddo;

//vs.sort();
//vs.randomize();

setvalueset(DYNAMIC_VALUE_SET, vs)
